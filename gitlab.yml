#!/usr/bin/env ansible-playbook
---
- name: configure gitlab repository
  hosts: localhost
  become: no
  gather_facts: yes

  vars:
    namespace: buluma

  vars_files:
    - vars/main.yml
    - vars/vault.yml

  tasks:
    - name: set role_path and role
      set_fact:
        role_path: "{{ lookup('env', 'PWD') }}"
        role: "{{ lookup('env', 'PWD') | basename | regex_replace('ansible-role-') }}"

    - name: verify role name
      debug:
        msg: "{{ role }}"

    - name: see if all variables are set
      assert:
        that:
          - namespace is defined
          - role is defined
        quiet: yes

    - name: urlencode path
      set_fact:
        encoded_path: "{{ namespace + '%2Fansible-role-' + role }}"

    - name: place variable
      block:
        - name: check if the variable is set already
          uri:
            url: "https://gitlab.com/api/v4/projects/{{ encoded_path }}/variables"
            method: GET
            body_format: json
            headers:
              PRIVATE-TOKEN: "{{ gitlab_private_token }}"
            body:
              key: "GALAXY_API_KEY"
          register: check_variable
          failed_when:
            check_variable.json | length <= 0
          ignore_errors: yes
      rescue:
        - name: place variable
          uri:
            url: "https://gitlab.com/api/v4/projects/{{ encoded_path }}/variables"
            method: POST
            body_format: json
            status_code:
              - 201
            headers:
              PRIVATE-TOKEN: "{{ gitlab_private_token }}"
            body:
              key: "GALAXY_API_KEY"
              value: "{{ galaxy_api_key }}"
              variable_type: env_var
              protects: true
              masked: true

    - name: list branches
      uri:
        url: "https://gitlab.com/api/v4/projects/{{ encoded_path }}/repository/branches"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
      register: gitlab_branches

    - name: debug branches
      debug:
        msg: "{{ gitlab_branches.json | list }}"
      register: gitlab_pipeline_branch

    - name: list pipelines
      uri:
        url: "https://gitlab.com/api/v4/projects/{{ encoded_path }}/pipeline_schedules"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
      register: gitlab_schedules

    - name: debug pipelines
      debug:
        msg: "{{ gitlab_schedules.json | list }}"
      register: gitlab_pipeline_output_schedule

    - name: delete all pipelines
      uri:
        url: "https://gitlab.com/api/v4/projects/{{ encoded_path }}/pipeline_schedules/{{ item.id }}"
        method: DELETE
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
        status_code:
          - 204
      loop: "{{ gitlab_schedules.json }}"
      loop_control:
        label: "{{ item.id }}"

    - name: create a new pipeline schedule
      uri:
        url: "https://gitlab.com/api/v4/projects/{{ encoded_path }}/pipeline_schedules"
        method: POST
        body_format: json
        status_code:
          - 201
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
        body:
          description: "Daily test"
          ref: master
          cron: "{{ letter_minute_mapping[role[1]] | default('0') }} */4 * * *"
          cron_timezone: Africa/Nairobi
